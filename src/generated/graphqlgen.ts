// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  Post,
  User,
  Order,
  LineItem,
  Sku,
  Product,
  Batch,
  Context
} from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsPost {
    id: string;
  }

  export interface ArgsOrder {
    id: string;
  }

  export type FeedResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type DraftsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type OrdersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Order[] | Promise<Order[]>;

  export type PostResolver = (
    parent: undefined,
    args: ArgsPost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type OrderResolver = (
    parent: undefined,
    args: ArgsOrder,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Order | null | Promise<Order | null>;

  export interface Type {
    feed: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    drafts: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    orders: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Order[] | Promise<Order[]>;

    post: (
      parent: undefined,
      args: ArgsPost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    order: (
      parent: undefined,
      args: ArgsOrder,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Order | null | Promise<Order | null>;
  }
}

export namespace PostResolvers {
  export const defaultResolvers = {
    id: (parent: Post) => parent.id,
    title: (parent: Post) => parent.title,
    content: (parent: Post) => parent.content,
    published: (parent: Post) => parent.published
  };

  export type IdResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TitleResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContentResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PublishedResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => boolean | Promise<boolean>;

  export type AuthorResolver = (
    parent: Post,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    id: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    title: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    content: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    published: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => boolean | Promise<boolean>;

    author: (
      parent: Post,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => (parent.name === undefined ? null : parent.name)
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type PostsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post[] | Promise<Post[]>;

  export type OrdersResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Order[] | Promise<Order[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    posts: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post[] | Promise<Post[]>;

    orders: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Order[] | Promise<Order[]>;
  }
}

export namespace OrderResolvers {
  export const defaultResolvers = {
    id: (parent: Order) => parent.id,
    number: (parent: Order) => parent.number,
    creator: (parent: Order) => parent.creator,
    lineItems: (parent: Order) => parent.lineItems
  };

  export type IdResolver = (
    parent: Order,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NumberResolver = (
    parent: Order,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type CreatorResolver = (
    parent: Order,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type LineItemsResolver = (
    parent: Order,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LineItem[] | Promise<LineItem[]>;

  export interface Type {
    id: (
      parent: Order,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    number: (
      parent: Order,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    creator: (
      parent: Order,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    lineItems: (
      parent: Order,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LineItem[] | Promise<LineItem[]>;
  }
}

export namespace LineItemResolvers {
  export const defaultResolvers = {
    id: (parent: LineItem) => parent.id,
    sku: (parent: LineItem) => parent.sku
  };

  export type IdResolver = (
    parent: LineItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type SkuResolver = (
    parent: LineItem,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Sku | Promise<Sku>;

  export interface Type {
    id: (
      parent: LineItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    sku: (
      parent: LineItem,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Sku | Promise<Sku>;
  }
}

export namespace SkuResolvers {
  export const defaultResolvers = {
    id: (parent: Sku) => parent.id,
    product: (parent: Sku) => parent.product,
    batch: (parent: Sku) => parent.batch
  };

  export type IdResolver = (
    parent: Sku,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ProductResolver = (
    parent: Sku,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | Promise<Product>;

  export type BatchResolver = (
    parent: Sku,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Batch | null | Promise<Batch | null>;

  export interface Type {
    id: (
      parent: Sku,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    product: (
      parent: Sku,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | Promise<Product>;

    batch: (
      parent: Sku,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Batch | null | Promise<Batch | null>;
  }
}

export namespace ProductResolvers {
  export const defaultResolvers = {
    id: (parent: Product) => parent.id,
    code: (parent: Product) => parent.code
  };

  export type IdResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CodeResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    code: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace BatchResolvers {
  export const defaultResolvers = {
    id: (parent: Batch) => parent.id,
    code: (parent: Batch) => parent.code
  };

  export type IdResolver = (
    parent: Batch,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CodeResolver = (
    parent: Batch,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Batch,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    code: (
      parent: Batch,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsCreateUser {
    name: string;
  }

  export interface ArgsCreateProduct {
    code: string;
  }

  export interface ArgsCreateBatch {
    code: string;
  }

  export interface ArgsCreateSku {
    batchID: string;
    productID: string;
  }

  export interface ArgsCreateLineItem {
    skuID: string;
  }

  export interface ArgsCreateOrder {
    lineItemIDs: string[];
    userId: string;
  }

  export interface ArgsCreateDraft {
    title: string;
    content: string;
    authorId: string;
  }

  export interface ArgsDeletePost {
    id: string;
  }

  export interface ArgsPublish {
    id: string;
  }

  export type CreateUserResolver = (
    parent: undefined,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export type CreateProductResolver = (
    parent: undefined,
    args: ArgsCreateProduct,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product | Promise<Product>;

  export type CreateBatchResolver = (
    parent: undefined,
    args: ArgsCreateBatch,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Batch | Promise<Batch>;

  export type CreateSkuResolver = (
    parent: undefined,
    args: ArgsCreateSku,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Sku | Promise<Sku>;

  export type CreateLineItemResolver = (
    parent: undefined,
    args: ArgsCreateLineItem,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => LineItem | Promise<LineItem>;

  export type CreateOrderResolver = (
    parent: undefined,
    args: ArgsCreateOrder,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Order | Promise<Order>;

  export type CreateDraftResolver = (
    parent: undefined,
    args: ArgsCreateDraft,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | Promise<Post>;

  export type DeletePostResolver = (
    parent: undefined,
    args: ArgsDeletePost,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export type PublishResolver = (
    parent: undefined,
    args: ArgsPublish,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Post | null | Promise<Post | null>;

  export interface Type {
    createUser: (
      parent: undefined,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;

    createProduct: (
      parent: undefined,
      args: ArgsCreateProduct,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product | Promise<Product>;

    createBatch: (
      parent: undefined,
      args: ArgsCreateBatch,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Batch | Promise<Batch>;

    createSku: (
      parent: undefined,
      args: ArgsCreateSku,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Sku | Promise<Sku>;

    createLineItem: (
      parent: undefined,
      args: ArgsCreateLineItem,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => LineItem | Promise<LineItem>;

    createOrder: (
      parent: undefined,
      args: ArgsCreateOrder,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Order | Promise<Order>;

    createDraft: (
      parent: undefined,
      args: ArgsCreateDraft,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | Promise<Post>;

    deletePost: (
      parent: undefined,
      args: ArgsDeletePost,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;

    publish: (
      parent: undefined,
      args: ArgsPublish,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Post | null | Promise<Post | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Post: PostResolvers.Type;
  User: UserResolvers.Type;
  Order: OrderResolvers.Type;
  LineItem: LineItemResolvers.Type;
  Sku: SkuResolvers.Type;
  Product: ProductResolvers.Type;
  Batch: BatchResolvers.Type;
  Mutation: MutationResolvers.Type;
}
